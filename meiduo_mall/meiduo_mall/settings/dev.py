
# 这里是开发环境的配置文件

"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path

from meiduo_mall.apps import users

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# print('关于base_dir的路径：',BASE_DIR)
BASE_DIR_templates = Path(__file__).resolve().parent.parent.parent



# 为了简化子应用的注册现在把meiduo_mall中的apps路径进行导入，这样注册子应用就简单了
# sys.path.insert(1,'C:\\Users\\wyys2\\Desktop\\本地git仓库\\meiduo_project\\meiduo_mall\\meiduo_mall\\apps') #但这个方式太复杂了，且不够灵活

# 最终选择这个方式进行添加系统的导包路径（用BASE_DIR来进行导包）
sys.path.insert(2,os.path.join(BASE_DIR,'apps'))
# print('系统的导包路劲为：',sys.path[:2])
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+h_6s0brb#-*2h)+sodb^faiq84g)wfr35r@!dq1j1ts((g%ur'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',          # Django认证系统位置：其包含认证框架的核心和默认的模型
    'django.contrib.contenttypes',  # 是Django内容型系统，它允许权限与你创建的模型关联
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 进行子应用的注册（同样要知道导包路径）
    # 'meiduo_mall.apps.users', #这个导包路径太复杂了，要进行简化
    # 预期以后以这个方式进行导包
    'users'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },

    # 改成jinja2模板引擎
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [os.path.join(BASE_DIR_templates, 'meiduo_mall/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'environment': 'utils.jinja2_env.jinja2_environment',
        },
    },

]

# 创建Redis数据库来使用缓存
CACHES = {
    # 默认的存储信息地址
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1", # 192.168.0.107
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 专门用来管理session信息
    "session": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/2", # 192.168.0.107
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
}

# 设置第二个专门用来存储session信息
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"


WSGI_APPLICATION = 'meiduo_mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    # 改为mysql数据库
    'default': {
            'ENGINE': 'django.db.backends.mysql',
            'host': '127.0.0.1',
            'PORT': 3306,
            'USER': 'root',
            'PASSWORD': '1901420817',
            'NAME': 'meiduo',
            'charset': 'utf8',
        }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# static_url: 指定加载静态文件的路由前缀
STATIC_URL = 'static/'
# 配置静态文件加载路径
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# 配置工程日志

import os  # 新增：导入 os 模块

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, #是否警用已经存在的日志器
    # 1.0配置信息显示格式
    'formatters': {
        # 1.1 verbose 详细显示的信息
        'verbose': {'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'},
        # 1.2 simple 简单显示的信息
        'simple': {'format': '%(levelname)s %(module)s %(lineno)d %(message)s'}
    },
    # 2.0 对日志进行过滤
    'filters': {
        # 2.1 django在debug格式下才输出日志
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 3.0 日志处理方法
    'handlers': {
        # 3.1 向终端中输出日志
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],  # 与 filters 名称一致
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # 3.2 向文件中输出日志
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 依赖 os，已导入
            'maxBytes': 1024*1024*100,
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    # 4.0 日志器
    'loggers': {
        # 4.1 定义了一个名为django的日志器
        'django': {
            # 4.2 可以同时向终端和文件中输出日志
            'handlers': ['console', 'file'],
            # 4.3 是否继续传递日志信息
            'propagate': True,
            # 4.4 日志器接受的最低日志级别
            'level': 'INFO',
        }
    }
}

# 指定自定义的的用户模型类：语法--> '子应用.用户模型类' (直接忽略models.py)
AUTH_USER_MODEL = "users.User"